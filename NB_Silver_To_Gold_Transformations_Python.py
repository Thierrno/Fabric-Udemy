{"cells":[{"cell_type":"markdown","source":["# Silver to Gold Transformations\n","\n","This notebook performs transformations on data from the Silver Lakehouse and saves the transformed data to the Gold Lakehouse."],"metadata":{"nteract":{"transient":{"deleting":false}},"microsoft":{"language":"python","language_group":"synapse_pyspark"}},"id":"75367600-2d8b-4e5a-9be7-c0fd756f3103"},{"cell_type":"code","source":["from pyspark.sql.window import Window\n","from pyspark.sql.functions import row_number"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":null,"statement_id":3,"statement_ids":[3],"state":"finished","livy_statement_state":"available","session_id":"9add0456-56d3-48e7-b6bd-946df0675fdd","normalized_state":"finished","queued_time":"2024-08-26T13:06:49.0202768Z","session_start_time":"2024-08-26T13:06:49.7285845Z","execution_start_time":"2024-08-26T13:07:00.2162168Z","execution_finish_time":"2024-08-26T13:07:02.6201343Z","parent_msg_id":"af95f7bc-645f-40af-84e3-c17e3e411f44"},"text/plain":"StatementMeta(, 9add0456-56d3-48e7-b6bd-946df0675fdd, 3, Finished, Available, Finished)"},"metadata":{}}],"execution_count":1,"metadata":{"microsoft":{"language":"python","language_group":"synapse_pyspark"}},"id":"b4c75203-8a9d-4352-868a-f3674726806a"},{"cell_type":"code","source":["# Define the path to the wind_power_production table in the Silver Lakehouse\n","# You may need to change the path to match your workspace\n","silver_table_path = \"abfss://WindPowerGeneration@onelake.dfs.fabric.microsoft.com/LH_Silver.Lakehouse/Tables/wind_power_production\"\n","\n","# Load the wind_power_production table\n","df = spark.read.format(\"delta\").load(silver_table_path)"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":null,"statement_id":4,"statement_ids":[4],"state":"finished","livy_statement_state":"available","session_id":"9add0456-56d3-48e7-b6bd-946df0675fdd","normalized_state":"finished","queued_time":"2024-08-26T13:06:49.0213723Z","session_start_time":null,"execution_start_time":"2024-08-26T13:07:03.1616922Z","execution_finish_time":"2024-08-26T13:07:05.0224993Z","parent_msg_id":"f83842ff-6e21-43a8-88fa-03be5e7efc59"},"text/plain":"StatementMeta(, 9add0456-56d3-48e7-b6bd-946df0675fdd, 4, Finished, Available, Finished)"},"metadata":{}}],"execution_count":2,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"microsoft":{"language":"python","language_group":"synapse_pyspark"}},"id":"f0345994-a90c-4e2f-8c27-c341030e950f"},{"cell_type":"code","source":["# Create the Date Dimension table\n","date_dim = df.select(\"date\", \"day\", \"month\", \"quarter\", \"year\").distinct() \\\n","            .withColumnRenamed(\"date\", \"date_id\")\n","\n","# Create the Time Dimension table\n","time_dim = df.select(\"time\", \"hour_of_day\", \"minute_of_hour\", \"second_of_minute\", \"time_period\").distinct() \\\n","            .withColumnRenamed(\"time\", \"time_id\")\n","\n","# Create the Turbine Dimension table\n","turbine_dim = df.select(\"turbine_name\", \"capacity\", \"location_name\", \"latitude\", \"longitude\", \"region\").distinct() \\\n","                .withColumn(\"turbine_id\", row_number().over(Window.orderBy(\"turbine_name\", \"capacity\", \"location_name\", \"latitude\", \"longitude\", \"region\")))\n","\n","# Create the Operational Status Dimension table\n","operational_status_dim = df.select(\"status\", \"responsible_department\").distinct() \\\n","                .withColumn(\"status_id\", row_number().over(Window.orderBy(\"status\", \"responsible_department\")))"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":null,"statement_id":5,"statement_ids":[5],"state":"finished","livy_statement_state":"available","session_id":"9add0456-56d3-48e7-b6bd-946df0675fdd","normalized_state":"finished","queued_time":"2024-08-26T13:06:49.022263Z","session_start_time":null,"execution_start_time":"2024-08-26T13:07:05.4779307Z","execution_finish_time":"2024-08-26T13:07:05.8296614Z","parent_msg_id":"5bf2678c-9a9e-4a9f-8a69-a55122ae4279"},"text/plain":"StatementMeta(, 9add0456-56d3-48e7-b6bd-946df0675fdd, 5, Finished, Available, Finished)"},"metadata":{}}],"execution_count":3,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"microsoft":{"language":"python","language_group":"synapse_pyspark"}},"id":"dfd719ae-ee37-49b8-9640-0762e3a7a64e"},{"cell_type":"code","source":["# Join the dimension tables to the original DataFrame\n","df = df.join(turbine_dim, [\"turbine_name\", \"capacity\", \"location_name\", \"latitude\", \"longitude\", \"region\"], \"left\") \\\n","        .join(operational_status_dim, [\"status\", \"responsible_department\"], \"left\")"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":null,"statement_id":6,"statement_ids":[6],"state":"finished","livy_statement_state":"available","session_id":"9add0456-56d3-48e7-b6bd-946df0675fdd","normalized_state":"finished","queued_time":"2024-08-26T13:06:49.0235118Z","session_start_time":null,"execution_start_time":"2024-08-26T13:07:06.282448Z","execution_finish_time":"2024-08-26T13:07:06.6628077Z","parent_msg_id":"7e11bcd7-6ace-4c2a-826a-e34d6e62f98a"},"text/plain":"StatementMeta(, 9add0456-56d3-48e7-b6bd-946df0675fdd, 6, Finished, Available, Finished)"},"metadata":{}}],"execution_count":4,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"microsoft":{"language":"python","language_group":"synapse_pyspark"}},"id":"ff6a81d6-2cb9-4454-ae9a-4c66844a852b"},{"cell_type":"code","source":["# Create the Fact table\n","fact_table = df.select(\"production_id\", \"date\", \"time\", \"turbine_id\", \"status_id\", \"wind_speed\", \"wind_direction\", \"energy_produced\") \\\n","                .withColumnRenamed(\"date\", \"date_id\").withColumnRenamed(\"time\", \"time_id\")"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":null,"statement_id":7,"statement_ids":[7],"state":"finished","livy_statement_state":"available","session_id":"9add0456-56d3-48e7-b6bd-946df0675fdd","normalized_state":"finished","queued_time":"2024-08-26T13:06:49.0244773Z","session_start_time":null,"execution_start_time":"2024-08-26T13:07:07.1748167Z","execution_finish_time":"2024-08-26T13:07:07.5145567Z","parent_msg_id":"60c4d602-a3c8-4c4b-8292-4e8cc2c44b2c"},"text/plain":"StatementMeta(, 9add0456-56d3-48e7-b6bd-946df0675fdd, 7, Finished, Available, Finished)"},"metadata":{}}],"execution_count":5,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"microsoft":{"language":"python","language_group":"synapse_pyspark"}},"id":"137628aa-a007-4504-a71c-3eab6aa87425"},{"cell_type":"code","source":["# Define the paths to the Gold tables\n","# You may need to change the paths to match your workspace\n","gold_date_dim_path = \"abfss://WindPowerGeneration@onelake.dfs.fabric.microsoft.com/LH_Gold.Lakehouse/Tables/dim_date\"\n","gold_time_dim_path = \"abfss://WindPowerGeneration@onelake.dfs.fabric.microsoft.com/LH_Gold.Lakehouse/Tables/dim_time\"\n","gold_turbine_dim_path = \"abfss://WindPowerGeneration@onelake.dfs.fabric.microsoft.com/LH_Gold.Lakehouse/Tables/dim_turbine\"\n","gold_operational_status_dim_path = \"abfss://WindPowerGeneration@onelake.dfs.fabric.microsoft.com/LH_Gold.Lakehouse/Tables/dim_operational_status\"\n","gold_fact_table_path = \"abfss://WindPowerGeneration@onelake.dfs.fabric.microsoft.com/LH_Gold.Lakehouse/Tables/fact_wind_power_production\"\n","\n","# Save the tables in the Gold Lakehouse\n","date_dim.write.format(\"delta\").mode(\"overwrite\").save(gold_date_dim_path)\n","time_dim.write.format(\"delta\").mode(\"overwrite\").save(gold_time_dim_path)\n","turbine_dim.write.format(\"delta\").mode(\"overwrite\").save(gold_turbine_dim_path)\n","operational_status_dim.write.format(\"delta\").mode(\"overwrite\").save(gold_operational_status_dim_path)\n","fact_table.write.format(\"delta\").mode(\"overwrite\").save(gold_fact_table_path)"],"outputs":[{"output_type":"display_data","data":{"application/vnd.livy.statement-meta+json":{"spark_pool":null,"statement_id":8,"statement_ids":[8],"state":"finished","livy_statement_state":"available","session_id":"9add0456-56d3-48e7-b6bd-946df0675fdd","normalized_state":"finished","queued_time":"2024-08-26T13:06:49.0254253Z","session_start_time":null,"execution_start_time":"2024-08-26T13:07:08.0060249Z","execution_finish_time":"2024-08-26T13:07:30.8389619Z","parent_msg_id":"c4383cef-7527-491d-94b2-645b92efd4db"},"text/plain":"StatementMeta(, 9add0456-56d3-48e7-b6bd-946df0675fdd, 8, Finished, Available, Finished)"},"metadata":{}}],"execution_count":6,"metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"microsoft":{"language":"python","language_group":"synapse_pyspark"}},"id":"9a9b7aa3-b3f3-42f6-9c25-4360e8121612"}],"metadata":{"kernel_info":{"name":"synapse_pyspark"},"kernelspec":{"name":"synapse_pyspark","language":"Python","display_name":"Synapse PySpark"},"language_info":{"name":"python"},"microsoft":{"language":"python","language_group":"synapse_pyspark","ms_spell_check":{"ms_spell_check_language":"en"}},"widgets":{},"nteract":{"version":"nteract-front-end@1.0.0"},"synapse_widget":{"version":"0.1","state":{}},"spark_compute":{"compute_id":"/trident/default"},"dependencies":{"lakehouse":{"known_lakehouses":[{"id":"fbc6646f-5e35-4dc8-9524-e05d51e7f330"},{"id":"10b25a50-d77f-4e5e-8c40-8134a1c982da"}],"default_lakehouse":"fbc6646f-5e35-4dc8-9524-e05d51e7f330","default_lakehouse_name":"LH_Silver","default_lakehouse_workspace_id":"bfcb8e41-2b70-4eaf-8e07-1ea42aafff4f"}}},"nbformat":4,"nbformat_minor":5}

#----------------------------------
from pyspark.sql.window import Window
from pyspark.sql.functions import col, row_number

#----------------------------------

# Define the path to the wind_power_production table in the Silver Lakehouse
silver_table_path = "abfss://WindPowerGeneration@onelake.dfs.fabric.microsoft.com/LH_Silver.Lakehouse/Tables/wind_power_production"

# Load the wind_power_production table
df = spark.read.format("delta").load(silver_table_path)

#----------------------------------

# Create the Date Dimension table
date_dim = df.select("date", "day", "month", "quarter", "year").distinct() \
             .withColumnRenamed("date", "date_id")

# Create the Time Dimension table
time_dim = df.select("time", "hour_of_day", "minute_of_hour", "seconde_of_minutes", "time_period").distinct() \
             .withColumnRenamed("time", "time_id")

# Create the Turbine Dimension table
turbine_dim = df.select("turbine_name", "capacity", "location_name", "latitude", "longitude", "region").distinct() \
                .withColumn("turbine_id", row_number().over(Window.orderBy("turbine_name", "capacity", "location_name", "latitude", "longitude", "region")))

# Create the Operational Status Dimension table
operational_status_dim = df.select("status", "responsible_department").distinct() \
                .withColumn("status_id", row_number().over(Window.orderBy("status", "responsible_department")))
                
#----------------------------------

# Join the dimension tables to the original DataFrame
df = df.join(turbine_dim, ["turbine_name", "capacity", "location_name", "latitude", "longitude", "region"], "left") \
        .join(operational_status_dim, ["status", "responsible_department"], "left")
        
 #----------------------------------       

# Create the Fact table
fact_table = df.select("production_id", "date", "time", "turbine_id", "status_id", "wind_speed", "wind_direction", "energy_produced") \
                .withColumnRenamed("date", "date_id").withColumnRenamed("time", "time_id")
                
                
#----------------------------------
# Define the paths to the Gold tables
# You may need to change the paths to match your workspace
gold_date_dim_path = "abfss://WindPowerGeneration@onelake.dfs.fabric.microsoft.com/LH_Gold.Lakehouse/Tables/dim_date"
gold_time_dim_path = "abfss://WindPowerGeneration@onelake.dfs.fabric.microsoft.com/LH_Gold.Lakehouse/Tables/dim_time"
gold_turbine_dim_path = "abfss://WindPowerGeneration@onelake.dfs.fabric.microsoft.com/LH_Gold.Lakehouse/Tables/dim_turbine"
gold_operational_status_dim_path = "abfss://WindPowerGeneration@onelake.dfs.fabric.microsoft.com/LH_Gold.Lakehouse/Tables/dim_operational_status"
gold_fact_table_path = "abfss://WindPowerGeneration@onelake.dfs.fabric.microsoft.com/LH_Gold.Lakehouse/Tables/fact_wind_power_production"

# Save the tables in the Gold Lakehouse
date_dim.write.format("delta").mode("overwrite").save(gold_date_dim_path)
time_dim.write.format("delta").mode("overwrite").save(gold_time_dim_path)
turbine_dim.write.format("delta").mode("overwrite").save(gold_turbine_dim_path)
operational_status_dim.write.format("delta").mode("overwrite").save(gold_operational_status_dim_path)
fact_table.write.format("delta").mode("overwrite").save(gold_fact_table_path) 
#----------------------------------

#----------------------------------


#----------------------------------